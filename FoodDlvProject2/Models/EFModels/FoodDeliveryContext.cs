// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace FoodDlvProject2.EFModels
{
    public partial class FoodDeliveryContext : DbContext
    {
        public FoodDeliveryContext()
        {
        }

        public FoodDeliveryContext(DbContextOptions<FoodDeliveryContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AccountStatues> AccountStatues { get; set; }
        public virtual DbSet<Carts> Carts { get; set; }
        public virtual DbSet<CreditCards> CreditCards { get; set; }
        public virtual DbSet<CustomerServices> CustomerServices { get; set; }
        public virtual DbSet<DeliveryDrivers> DeliveryDrivers { get; set; }
        public virtual DbSet<DeliveryDriversRatings> DeliveryDriversRatings { get; set; }
        public virtual DbSet<DeliveryRecords> DeliveryRecords { get; set; }
        public virtual DbSet<DeliveryViolationLists> DeliveryViolationLists { get; set; }
        public virtual DbSet<DeliveryViolationRecords> DeliveryViolationRecords { get; set; }
        public virtual DbSet<DriverCancellationRecords> DriverCancellationRecords { get; set; }
        public virtual DbSet<DriverCancellations> DriverCancellations { get; set; }
        public virtual DbSet<DriverWorkStatuses> DriverWorkStatuses { get; set; }
        public virtual DbSet<Favourites> Favourites { get; set; }
        public virtual DbSet<MemberViolationLists> MemberViolationLists { get; set; }
        public virtual DbSet<MemberViolationRecords> MemberViolationRecords { get; set; }
        public virtual DbSet<Members> Members { get; set; }
        public virtual DbSet<OrderDetails> OrderDetails { get; set; }
        public virtual DbSet<OrderStatuses> OrderStatuses { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<Pays> Pays { get; set; }
        public virtual DbSet<ProcessingStatues> ProcessingStatues { get; set; }
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<StoreCancellationRecords> StoreCancellationRecords { get; set; }
        public virtual DbSet<StoreCancellations> StoreCancellations { get; set; }
        public virtual DbSet<StoreCategories> StoreCategories { get; set; }
        public virtual DbSet<StorePrincipals> StorePrincipals { get; set; }
        public virtual DbSet<StoreRatings> StoreRatings { get; set; }
        public virtual DbSet<StoreViolationLists> StoreViolationLists { get; set; }
        public virtual DbSet<StoreViolationRecords> StoreViolationRecords { get; set; }
        public virtual DbSet<StoreWallet> StoreWallet { get; set; }
        public virtual DbSet<Stores> Stores { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AccountStatues>(entity =>
            {
                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Carts>(entity =>
            {
                entity.HasIndex(e => e.MemberId, "IX_Carts")
                    .IsUnique();

                entity.HasOne(d => d.Member)
                    .WithOne(p => p.Carts)
                    .HasForeignKey<Carts>(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Carts_Members");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Carts)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Carts_Products");

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.Carts)
                    .HasForeignKey(d => d.StoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Carts_Stores");
            });

            modelBuilder.Entity<CreditCards>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BankName)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.CreditCard)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsFixedLength();

                entity.HasOne(d => d.Member)
                    .WithMany()
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CreditCard_Members");
            });

            modelBuilder.Entity<CustomerServices>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<DeliveryDrivers>(entity =>
            {
                entity.HasIndex(e => e.Phone, "IX_DeliveryDrivers")
                    .IsUnique();

                entity.HasIndex(e => e.IdentityCode, "IX_DeliveryDrivers_1")
                    .IsUnique();

                entity.HasIndex(e => e.Email, "IX_DeliveryDrivers_2")
                    .IsUnique();

                entity.HasIndex(e => e.Account, "IX_DeliveryDrivers_3")
                    .IsUnique();

                entity.Property(e => e.Account)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AccountStatusId).HasDefaultValueSql("((1))");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.BankAccount)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Birthday).HasColumnType("date");

                entity.Property(e => e.DriverLicense)
                    .IsRequired()
                    .HasColumnType("image");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Idcard)
                    .IsRequired()
                    .HasColumnType("image")
                    .HasColumnName("IDCard");

                entity.Property(e => e.IdentityCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.RegistrationTime).HasColumnType("datetime");

                entity.Property(e => e.VehicleRegistration)
                    .IsRequired()
                    .HasColumnType("image");

                entity.HasOne(d => d.AccountStatus)
                    .WithMany(p => p.DeliveryDrivers)
                    .HasForeignKey(d => d.AccountStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeliveryDrivers_DeliveryDriversAccountStatues");
            });

            modelBuilder.Entity<DeliveryDriversRatings>(entity =>
            {
                entity.Property(e => e.Comment).HasMaxLength(100);

                entity.HasOne(d => d.DeliveryDrivers)
                    .WithMany(p => p.DeliveryDriversRatings)
                    .HasForeignKey(d => d.DeliveryDriversId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeliveryDriversRatings_DeliveryDrivers");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.DeliveryDriversRatings)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeliveryDriversRatings_Members");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.DeliveryDriversRatings)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeliveryDriversRatings_Orders");
            });

            modelBuilder.Entity<DeliveryRecords>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Milage).HasColumnType("decimal(18, 0)");

                entity.HasOne(d => d.DeliveryDrivers)
                    .WithMany()
                    .HasForeignKey(d => d.DeliveryDriversId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeliveryRecords_DeliveryDrivers");

                entity.HasOne(d => d.Order)
                    .WithMany()
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeliveryRecords_Orders");
            });

            modelBuilder.Entity<DeliveryViolationLists>(entity =>
            {
                entity.Property(e => e.ViolationContent)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DeliveryViolationRecords>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ViolationDate).HasColumnType("datetime");

                entity.HasOne(d => d.DeliveryDrivers)
                    .WithMany()
                    .HasForeignKey(d => d.DeliveryDriversId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeliveryViolationRecords_DeliveryDrivers");

                entity.HasOne(d => d.Order)
                    .WithMany()
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeliveryViolationRecords_Orders");

                entity.HasOne(d => d.Violation)
                    .WithMany()
                    .HasForeignKey(d => d.ViolationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeliveryViolationRecords_DeliveryViolationLists");
            });

            modelBuilder.Entity<DriverCancellationRecords>(entity =>
            {
                entity.Property(e => e.CancellationDate).HasColumnType("datetime");

                entity.HasOne(d => d.Cancellation)
                    .WithMany(p => p.DriverCancellationRecords)
                    .HasForeignKey(d => d.CancellationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CancellationRecords_Cancellations");

                entity.HasOne(d => d.DeliveryDrivers)
                    .WithMany(p => p.DriverCancellationRecords)
                    .HasForeignKey(d => d.DeliveryDriversId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CancellationRecords_DeliveryDrivers");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.DriverCancellationRecords)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CancellationRecords_Orders");
            });

            modelBuilder.Entity<DriverCancellations>(entity =>
            {
                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DriverWorkStatuses>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Latitude)
                    .HasMaxLength(50)
                    .HasColumnName("latitude");

                entity.Property(e => e.Longitude)
                    .HasMaxLength(50)
                    .HasColumnName("longitude");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.HasOne(d => d.DeliveryDrivers)
                    .WithMany()
                    .HasForeignKey(d => d.DeliveryDriversId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DeliveryDriverStatuses_DeliveryDrivers");
            });

            modelBuilder.Entity<Favourites>(entity =>
            {
                entity.HasNoKey();

                entity.HasOne(d => d.Member)
                    .WithMany()
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Favourites_Members");

                entity.HasOne(d => d.Store)
                    .WithMany()
                    .HasForeignKey(d => d.StoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Favourites_Stores");
            });

            modelBuilder.Entity<MemberViolationLists>(entity =>
            {
                entity.Property(e => e.ViolationContent)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MemberViolationRecords>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.MemberId, "IX_MemberViolationRecord")
                    .IsUnique();

                entity.Property(e => e.ViolationDate).HasColumnType("datetime");

                entity.HasOne(d => d.Member)
                    .WithOne()
                    .HasForeignKey<MemberViolationRecords>(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Table_1_Members");

                entity.HasOne(d => d.Order)
                    .WithMany()
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MemberViolationRecords_Orders");

                entity.HasOne(d => d.Violation)
                    .WithMany()
                    .HasForeignKey(d => d.ViolationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MemberViolationRecord_MemberViolationList");
            });

            modelBuilder.Entity<Members>(entity =>
            {
                entity.HasIndex(e => e.Phone, "IX_Members")
                    .IsUnique();

                entity.HasIndex(e => e.IdentityCode, "IX_Members_1")
                    .IsUnique();

                entity.HasIndex(e => e.Account, "IX_Members_2")
                    .IsUnique();

                entity.Property(e => e.Account)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AccountStatusId).HasDefaultValueSql("((1))");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Birthday).HasColumnType("date");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IdentityCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.RegistrationTime).HasColumnType("datetime");

                entity.HasOne(d => d.AccountStatus)
                    .WithMany(p => p.Members)
                    .HasForeignKey(d => d.AccountStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Members_MemberAccountStatues");
            });

            modelBuilder.Entity<OrderDetails>(entity =>
            {
                entity.Property(e => e.ProductName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StoreAddress)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.StoreName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderDetails_Orders");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderDetails_Products");

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.StoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderDetails_Stores");
            });

            modelBuilder.Entity<OrderStatuses>(entity =>
            {
                entity.Property(e => e.Comfirm).HasColumnType("datetime");

                entity.Property(e => e.DeliveryAvailable).HasColumnType("datetime");

                entity.Property(e => e.DeliveryEnd).HasColumnType("datetime");

                entity.Property(e => e.DeliveryStart).HasColumnType("datetime");

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.HasOne(d => d.DeliveryDrivers)
                    .WithMany(p => p.OrderStatuses)
                    .HasForeignKey(d => d.DeliveryDriversId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderStatuses_DeliveryDrivers");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderStatuses)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderStatuses_Orders");
            });

            modelBuilder.Entity<Orders>(entity =>
            {
                entity.Property(e => e.DeliveryAddress)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.OrderTime).HasColumnType("datetime");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_Members");
            });

            modelBuilder.Entity<Pays>(entity =>
            {
                entity.HasNoKey();

                entity.HasOne(d => d.DeliveryDrivers)
                    .WithMany()
                    .HasForeignKey(d => d.DeliveryDriversId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pays_DeliveryDrivers");
            });

            modelBuilder.Entity<ProcessingStatues>(entity =>
            {
                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Products>(entity =>
            {
                entity.Property(e => e.ProductContent).HasMaxLength(100);

                entity.Property(e => e.ProductName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.StoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductInformations_Stores");
            });

            modelBuilder.Entity<StoreCancellationRecords>(entity =>
            {
                entity.Property(e => e.CancellationDate).HasColumnType("datetime");

                entity.HasOne(d => d.Cancellation)
                    .WithMany(p => p.StoreCancellationRecords)
                    .HasForeignKey(d => d.CancellationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StoreCancellationRecords_StoreCancellations");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.StoreCancellationRecords)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StoreCancellationRecords_Orders");

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.StoreCancellationRecords)
                    .HasForeignKey(d => d.StoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StoreCancellationRecords_Stores");
            });

            modelBuilder.Entity<StoreCancellations>(entity =>
            {
                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<StoreCategories>(entity =>
            {
                entity.HasIndex(e => e.CategoryName, "IX_StoreCategories")
                    .IsUnique();

                entity.Property(e => e.CategoryContent)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.StoreCategories)
                    .HasForeignKey(d => d.StoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StoreCategories_Stores");
            });

            modelBuilder.Entity<StorePrincipals>(entity =>
            {
                entity.HasIndex(e => e.IdentityCode, "IX_ShopPrincipal")
                    .IsUnique();

                entity.HasIndex(e => e.Email, "IX_ShopPrincipal_1")
                    .IsUnique();

                entity.HasIndex(e => e.Account, "IX_ShopPrincipal_2")
                    .IsUnique();

                entity.Property(e => e.Account)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AccountStatusId).HasDefaultValueSql("((1))");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Birthday).HasColumnType("date");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.IdentityCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.RegistrationTime).HasColumnType("datetime");

                entity.HasOne(d => d.AccountStatus)
                    .WithMany(p => p.StorePrincipals)
                    .HasForeignKey(d => d.AccountStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StorePrincipals_StoreAccountStatues");
            });

            modelBuilder.Entity<StoreRatings>(entity =>
            {
                entity.Property(e => e.Comment).HasMaxLength(100);

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.StoreRatings)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StoreRatings_Members");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.StoreRatings)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StoreRatings_Orders");

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.StoreRatings)
                    .HasForeignKey(d => d.StoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StoreRatings_Stores");
            });

            modelBuilder.Entity<StoreViolationLists>(entity =>
            {
                entity.Property(e => e.ViolationContent)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<StoreViolationRecords>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.StoreId, "IX_StoreViolationRecord")
                    .IsUnique();

                entity.Property(e => e.ViolationDate).HasColumnType("datetime");

                entity.HasOne(d => d.Order)
                    .WithMany()
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StoreViolationRecords_Orders");

                entity.HasOne(d => d.Store)
                    .WithOne()
                    .HasForeignKey<StoreViolationRecords>(d => d.StoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StoreViolationRecord_Store");

                entity.HasOne(d => d.Violation)
                    .WithMany()
                    .HasForeignKey(d => d.ViolationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StoreViolationRecord_StoreViolationList");
            });

            modelBuilder.Entity<StoreWallet>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.StoreId, "IX_StoreWallet")
                    .IsUnique();

                entity.HasOne(d => d.Order)
                    .WithMany()
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StoreWallet_Orders");

                entity.HasOne(d => d.Store)
                    .WithOne()
                    .HasForeignKey<StoreWallet>(d => d.StoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_StoreWallet_Stores");
            });

            modelBuilder.Entity<Stores>(entity =>
            {
                entity.HasIndex(e => e.StoreName, "IX_Store")
                    .IsUnique();

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Closing).HasColumnType("datetime");

                entity.Property(e => e.ContactNumber)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Opening).HasColumnType("datetime");

                entity.Property(e => e.StoreName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.StorePrincipal)
                    .WithMany(p => p.Stores)
                    .HasForeignKey(d => d.StorePrincipalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Store_StorePrincipal");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}